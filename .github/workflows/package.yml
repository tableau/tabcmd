name: Release-Executable

# Pyinstaller requires that executables for each OS are built on that OS
# This action is intended to build on each of the supported OS's: mac, windows, linux.
# and then upload all three files to a new release

# reference material:
# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://anshumanfauzdar.medium.com/using-github-actions-to-bundle-python-application-into-a-single-package-and-automatic-release-834bd42e0670

on:
  push:
    tags: release*
  workflow_dispatch:
    inputs:
      is_draft:
        description: 'Test PyPi'
        required: true
        type: boolean
  
jobs:
  createrelease:
    name: Create Release
    runs-on: windows-latest
    # TODO linux
    # https://stackoverflow.com/questions/31259856/how-to-create-an-executable-file-for-linux-machine-using-pyinstaller

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: Release ${{ github.event.head_commit.message }}
        draft: inputs.is_draft
        prerelease: inputs.is_draft

    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  buildexe:
    name: Build executables and upload them to the existing release
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
              python setup.py build &&
              python res/versioning.py && python setup.py build &&
              pip install . &&
              dir dist && dir dist/windows
              pyinstaller tabcmd-windows.spec --clean --noconfirm --distpath ./dist/windows
            OUT_FILE_NAME: tabcmd.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: macos-latest
            TARGET: macos
            CMD_BUILD:  >
              python setup.py build &&
              python res/versioning.py && python setup.py build &&
              pip install . &&
              pyinstaller tabcmd-mac.spec --clean --noconfirm --distpath ./dist/macos &&
              cd dist/ && ls &&
              zip -r9 mac tabcmd-mac.app/
            OUT_FILE_NAME: tabcmd.zip
            ASSET_MIME: application/zip
          - os: ubuntu-latest
            TARGET: ubuntu
            CMD_BUILD: >
              ls &&
              pyinstaller --clean -y --distpath ./dist/linux tabcmd-linux.spec &&
              chown -R --reference=. ./dist/linux
            OUT_FILE_NAME: tab-for-linux

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install dependencies
      run: >
        pip install -e .[build] && pip install -e .[package] &&
        python setup.py build && python res/versioning.py && python setup.py build

    - name: Package with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}

    - name: Get Release URL
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Echo Release URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
        ls
        pwd

    - name: Upload Release Asset for ${{matrix.TARGET}}
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.TARGET }}/tabcmd/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
