name: Release-Executable

# Pyinstaller requires that executables for each OS are built on that OS
# This action is intended to build on each of the supported OS's: mac, windows, linux.
# and then upload all three files to a new release

# reference material:
# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://anshumanfauzdar.medium.com/using-github-actions-to-bundle-python-application-into-a-single-package-and-automatic-release-834bd42e0670


# TODO: actually plan when we want to trigger this job
#  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
on:
  push:
    tags: release
    branches: jac/pyinstaller

jobs:

  createrelease:
    name: Create Release
    runs-on: [windows-latest, mac-latest] # ubuntu-latest,
    # TODO linux
    # https://stackoverflow.com/questions/31259856/how-to-create-an-executable-file-for-linux-machine-using-pyinstaller

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.head_commit.message }}
        release_name: Release ${{ github.event.head_commit.message }}
        draft: true # todo: change to false once action is tested
        prerelease: false

    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  buildexe:
    name: Build executables and upload them to the existing release
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller tabcmd-windows.spec --clean --noconfirm
            OUT_FILE_NAME: tabcmd.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
              pyinstaller tabcmd-mac.spec --clean --noconfirm &&
              cd dist/ &&
              zip -r9 tabcmd tabcmd.app/
            OUT_FILE_NAME: tabcmd.zip
            ASSET_MIME: application/zip

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[install]
        pip install -e .[build]
        pip install -e .[package]
        python setup.py build
        python res/versioning.py
        

    - name: Package with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}

    - name: Get Release URL
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Echo Release URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value && ls && pwd

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/tabcmd/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
